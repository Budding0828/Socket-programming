#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <sys/select.h>

#define PORT 8887   //端口号
#define BACKLOG 10  //设置等待连接数目
#define MAXBUFFER 200

int main(){

    printf("**服务端**\n");
    fd_set rfds;
    int maxfd;
    int retval;
    struct timeval tv;

    //创建套接字
    //设置通信类型为AF_INET
    //套接字类型采用流格式
    int serv_sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    int on = 1;
    int s = setsockopt(serv_sock, SOL_SOCKET, SO_REUSEADDR, &on, sizeof(int));//解决端口占用问题，断开之后不需要等待一段时间再连接
    if(s < 0)
    {
        perror("setsockopt 错误\n");
        exit(1);
    }

    struct sockaddr_in serv_addr;
    //初始化sockaddr_in 数据
    memset(&serv_addr, 0, sizeof(serv_addr));  //每个字节都用0填充
    serv_addr.sin_family = AF_INET;  //使用IPv4地址
    serv_addr.sin_addr.s_addr = inet_addr("127.0.0.1");  //具体的IP地址
    serv_addr.sin_port = htons(PORT);  //端口

    //将套接字和IP、端口绑定
    if(bind(serv_sock, (struct sockaddr*)&serv_addr, sizeof(serv_addr))==-1)
    {
        perror("bind失败\n");
        exit(1);
    }

    //进入监听状态，等待用户发起请求
    if(listen(serv_sock, BACKLOG)==-1)
    {
        perror("监听失败\n");
        exit(1);

    }

    //接收客户端请求
    struct sockaddr_in clnt_addr;
    socklen_t clnt_addr_size = sizeof(clnt_addr);
    int clnt_sock = accept(serv_sock, (struct sockaddr*)&clnt_addr, &clnt_addr_size);
    if(clnt_sock == -1)
    {
        perror("建立连接失败\n");
        exit(1);
    }
    printf("成功连接服务端\n");

    //向客户端发送数据
    char msg[MAXBUFFER];

    while(1)
    {
        //把可读文件描述符的集合清空
        FD_ZERO(&rfds);
        //把标准输入的文件描述符加入到集合中
        FD_SET(0, &rfds);
        maxfd = 0;
        //把当前连接的文件描述符加入到集合中
        FD_SET(clnt_sock, &rfds);

        //找出文件描述符集合中最大的文件描述符
        if(maxfd < clnt_sock)   maxfd = clnt_sock;

        //设置超时时间
        tv.tv_sec = 2;
        tv.tv_usec = 0;
        retval = select(maxfd+1, &rfds, NULL, NULL, &tv);
        if(retval == -1)
        {
            perror("服务端select出错\n");
            exit(1);
        }
        else if(retval == 0)
        {
            //printf("waiting...\n");
            continue;
        }
        else
        {
            //客户端发送来消息
            if(FD_ISSET(clnt_sock, &rfds))
            {
                memset(&msg, 0, sizeof(msg));
                read(clnt_sock, msg, sizeof(msg));
                if(strlen(msg)==0)
                {
                    printf("客户端退出，结束聊天\n");
                    break;

                }
                printf("来自客户端的内容： %s\n", msg);
            }
            //服务端输入了消息，准备发送
            if(FD_ISSET(0, &rfds))
            {
                memset(&msg, 0, sizeof(msg));
                //gets(msg);
                fgets(msg, MAXBUFFER, stdin);
                write(clnt_sock, msg, sizeof(msg));
            }

        }


        //printf("请输入传输内容：\n");
        //scanf("%s", msg);
        //write(clnt_sock, msg, sizeof(msg));

    }


    //关闭套接字
    close(clnt_sock);
    close(serv_sock);

    return 0;
}

